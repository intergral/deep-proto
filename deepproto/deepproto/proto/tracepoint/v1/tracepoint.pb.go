// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: deepproto/proto/tracepoint/v1/tracepoint.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1 "github.com/intergral/go-deep-proto/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// This is the config of a tracepoint that should be installed by the application agent.
type TracePointConfig struct {
	Id      string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Path    string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	LineNo  int32             `protobuf:"varint,3,opt,name=line_no,json=lineNo,proto3" json:"line_no,omitempty"`
	Args    map[string]string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Watches []string          `protobuf:"bytes,5,rep,name=watches,proto3" json:"watches,omitempty"`
}

func (m *TracePointConfig) Reset()         { *m = TracePointConfig{} }
func (m *TracePointConfig) String() string { return proto.CompactTextString(m) }
func (*TracePointConfig) ProtoMessage()    {}
func (*TracePointConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c444360bd218ed7, []int{0}
}
func (m *TracePointConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TracePointConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TracePointConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TracePointConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracePointConfig.Merge(m, src)
}
func (m *TracePointConfig) XXX_Size() int {
	return m.Size()
}
func (m *TracePointConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TracePointConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TracePointConfig proto.InternalMessageInfo

func (m *TracePointConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TracePointConfig) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TracePointConfig) GetLineNo() int32 {
	if m != nil {
		return m.LineNo
	}
	return 0
}

func (m *TracePointConfig) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *TracePointConfig) GetWatches() []string {
	if m != nil {
		return m.Watches
	}
	return nil
}

type VariableId struct {
	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Modifiers []string `protobuf:"bytes,3,rep,name=modifiers,proto3" json:"modifiers,omitempty"`
}

func (m *VariableId) Reset()         { *m = VariableId{} }
func (m *VariableId) String() string { return proto.CompactTextString(m) }
func (*VariableId) ProtoMessage()    {}
func (*VariableId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c444360bd218ed7, []int{1}
}
func (m *VariableId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VariableId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VariableId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VariableId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariableId.Merge(m, src)
}
func (m *VariableId) XXX_Size() int {
	return m.Size()
}
func (m *VariableId) XXX_DiscardUnknown() {
	xxx_messageInfo_VariableId.DiscardUnknown(m)
}

var xxx_messageInfo_VariableId proto.InternalMessageInfo

func (m *VariableId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VariableId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VariableId) GetModifiers() []string {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

type Variable struct {
	Type      string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value     string        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Hash      string        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Children  []*VariableId `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	Truncated bool          `protobuf:"varint,5,opt,name=truncated,proto3" json:"truncated,omitempty"`
}

func (m *Variable) Reset()         { *m = Variable{} }
func (m *Variable) String() string { return proto.CompactTextString(m) }
func (*Variable) ProtoMessage()    {}
func (*Variable) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c444360bd218ed7, []int{2}
}
func (m *Variable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Variable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Variable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Variable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Variable.Merge(m, src)
}
func (m *Variable) XXX_Size() int {
	return m.Size()
}
func (m *Variable) XXX_DiscardUnknown() {
	xxx_messageInfo_Variable.DiscardUnknown(m)
}

var xxx_messageInfo_Variable proto.InternalMessageInfo

func (m *Variable) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Variable) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Variable) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Variable) GetChildren() []*VariableId {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Variable) GetTruncated() bool {
	if m != nil {
		return m.Truncated
	}
	return false
}

type StackFrame struct {
	FileName               string        `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	MethodName             string        `protobuf:"bytes,2,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	LineNumber             int32         `protobuf:"varint,3,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	ClassName              string        `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	IsAsync                bool          `protobuf:"varint,5,opt,name=is_async,json=isAsync,proto3" json:"is_async,omitempty"`
	ColumnNumber           int32         `protobuf:"varint,6,opt,name=column_number,json=columnNumber,proto3" json:"column_number,omitempty"`
	TranspiledFileName     string        `protobuf:"bytes,7,opt,name=transpiled_file_name,json=transpiledFileName,proto3" json:"transpiled_file_name,omitempty"`
	TranspiledLineNumber   int32         `protobuf:"varint,8,opt,name=transpiled_line_number,json=transpiledLineNumber,proto3" json:"transpiled_line_number,omitempty"`
	TranspiledColumnNumber int32         `protobuf:"varint,9,opt,name=transpiled_column_number,json=transpiledColumnNumber,proto3" json:"transpiled_column_number,omitempty"`
	Variables              []*VariableId `protobuf:"bytes,10,rep,name=variables,proto3" json:"variables,omitempty"`
	AppFrame               bool          `protobuf:"varint,11,opt,name=app_frame,json=appFrame,proto3" json:"app_frame,omitempty"`
}

func (m *StackFrame) Reset()         { *m = StackFrame{} }
func (m *StackFrame) String() string { return proto.CompactTextString(m) }
func (*StackFrame) ProtoMessage()    {}
func (*StackFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c444360bd218ed7, []int{3}
}
func (m *StackFrame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StackFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StackFrame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StackFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackFrame.Merge(m, src)
}
func (m *StackFrame) XXX_Size() int {
	return m.Size()
}
func (m *StackFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_StackFrame.DiscardUnknown(m)
}

var xxx_messageInfo_StackFrame proto.InternalMessageInfo

func (m *StackFrame) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *StackFrame) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *StackFrame) GetLineNumber() int32 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

func (m *StackFrame) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *StackFrame) GetIsAsync() bool {
	if m != nil {
		return m.IsAsync
	}
	return false
}

func (m *StackFrame) GetColumnNumber() int32 {
	if m != nil {
		return m.ColumnNumber
	}
	return 0
}

func (m *StackFrame) GetTranspiledFileName() string {
	if m != nil {
		return m.TranspiledFileName
	}
	return ""
}

func (m *StackFrame) GetTranspiledLineNumber() int32 {
	if m != nil {
		return m.TranspiledLineNumber
	}
	return 0
}

func (m *StackFrame) GetTranspiledColumnNumber() int32 {
	if m != nil {
		return m.TranspiledColumnNumber
	}
	return 0
}

func (m *StackFrame) GetVariables() []*VariableId {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *StackFrame) GetAppFrame() bool {
	if m != nil {
		return m.AppFrame
	}
	return false
}

type WatchResult struct {
	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// Types that are valid to be assigned to Result:
	//	*WatchResult_GoodResult
	//	*WatchResult_ErrorResult
	Result isWatchResult_Result `protobuf_oneof:"result"`
}

func (m *WatchResult) Reset()         { *m = WatchResult{} }
func (m *WatchResult) String() string { return proto.CompactTextString(m) }
func (*WatchResult) ProtoMessage()    {}
func (*WatchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c444360bd218ed7, []int{4}
}
func (m *WatchResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchResult.Merge(m, src)
}
func (m *WatchResult) XXX_Size() int {
	return m.Size()
}
func (m *WatchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchResult.DiscardUnknown(m)
}

var xxx_messageInfo_WatchResult proto.InternalMessageInfo

type isWatchResult_Result interface {
	isWatchResult_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WatchResult_GoodResult struct {
	GoodResult *VariableId `protobuf:"bytes,2,opt,name=good_result,json=goodResult,proto3,oneof" json:"good_result,omitempty"`
}
type WatchResult_ErrorResult struct {
	ErrorResult string `protobuf:"bytes,3,opt,name=error_result,json=errorResult,proto3,oneof" json:"error_result,omitempty"`
}

func (*WatchResult_GoodResult) isWatchResult_Result()  {}
func (*WatchResult_ErrorResult) isWatchResult_Result() {}

func (m *WatchResult) GetResult() isWatchResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *WatchResult) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *WatchResult) GetGoodResult() *VariableId {
	if x, ok := m.GetResult().(*WatchResult_GoodResult); ok {
		return x.GoodResult
	}
	return nil
}

func (m *WatchResult) GetErrorResult() string {
	if x, ok := m.GetResult().(*WatchResult_ErrorResult); ok {
		return x.ErrorResult
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WatchResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WatchResult_GoodResult)(nil),
		(*WatchResult_ErrorResult)(nil),
	}
}

type Snapshot struct {
	Id            string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tracepoint    *TracePointConfig    `protobuf:"bytes,2,opt,name=tracepoint,proto3" json:"tracepoint,omitempty"`
	VarLookup     map[string]*Variable `protobuf:"bytes,3,rep,name=var_lookup,json=varLookup,proto3" json:"var_lookup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ts            int64                `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	Frames        []*StackFrame        `protobuf:"bytes,5,rep,name=frames,proto3" json:"frames,omitempty"`
	Watches       []*WatchResult       `protobuf:"bytes,6,rep,name=watches,proto3" json:"watches,omitempty"`
	Attributes    []*v1.KeyValue       `protobuf:"bytes,7,rep,name=attributes,proto3" json:"attributes,omitempty"`
	NanosDuration int64                `protobuf:"varint,8,opt,name=nanos_duration,json=nanosDuration,proto3" json:"nanos_duration,omitempty"`
	Resource      []*v1.KeyValue       `protobuf:"bytes,9,rep,name=resource,proto3" json:"resource,omitempty"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c444360bd218ed7, []int{5}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return m.Size()
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Snapshot) GetTracepoint() *TracePointConfig {
	if m != nil {
		return m.Tracepoint
	}
	return nil
}

func (m *Snapshot) GetVarLookup() map[string]*Variable {
	if m != nil {
		return m.VarLookup
	}
	return nil
}

func (m *Snapshot) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *Snapshot) GetFrames() []*StackFrame {
	if m != nil {
		return m.Frames
	}
	return nil
}

func (m *Snapshot) GetWatches() []*WatchResult {
	if m != nil {
		return m.Watches
	}
	return nil
}

func (m *Snapshot) GetAttributes() []*v1.KeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Snapshot) GetNanosDuration() int64 {
	if m != nil {
		return m.NanosDuration
	}
	return 0
}

func (m *Snapshot) GetResource() []*v1.KeyValue {
	if m != nil {
		return m.Resource
	}
	return nil
}

type SnapshotResponse struct {
}

func (m *SnapshotResponse) Reset()         { *m = SnapshotResponse{} }
func (m *SnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*SnapshotResponse) ProtoMessage()    {}
func (*SnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c444360bd218ed7, []int{6}
}
func (m *SnapshotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotResponse.Merge(m, src)
}
func (m *SnapshotResponse) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TracePointConfig)(nil), "deepproto.proto.tracepoint.v1.TracePointConfig")
	proto.RegisterMapType((map[string]string)(nil), "deepproto.proto.tracepoint.v1.TracePointConfig.ArgsEntry")
	proto.RegisterType((*VariableId)(nil), "deepproto.proto.tracepoint.v1.VariableId")
	proto.RegisterType((*Variable)(nil), "deepproto.proto.tracepoint.v1.Variable")
	proto.RegisterType((*StackFrame)(nil), "deepproto.proto.tracepoint.v1.StackFrame")
	proto.RegisterType((*WatchResult)(nil), "deepproto.proto.tracepoint.v1.WatchResult")
	proto.RegisterType((*Snapshot)(nil), "deepproto.proto.tracepoint.v1.Snapshot")
	proto.RegisterMapType((map[string]*Variable)(nil), "deepproto.proto.tracepoint.v1.Snapshot.VarLookupEntry")
	proto.RegisterType((*SnapshotResponse)(nil), "deepproto.proto.tracepoint.v1.SnapshotResponse")
}

func init() {
	proto.RegisterFile("deepproto/proto/tracepoint/v1/tracepoint.proto", fileDescriptor_6c444360bd218ed7)
}

var fileDescriptor_6c444360bd218ed7 = []byte{
	// 900 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xf6, 0xc6, 0x8e, 0xbd, 0x7b, 0xdc, 0x86, 0x68, 0x54, 0xc1, 0x12, 0xa8, 0xb1, 0x1c, 0xd1,
	0x1a, 0xa4, 0xda, 0x4d, 0x40, 0x50, 0x90, 0x10, 0x4a, 0xd3, 0x96, 0x22, 0x42, 0xa8, 0x36, 0x50,
	0x24, 0x6e, 0x56, 0xe3, 0xdd, 0x89, 0x3d, 0xca, 0x7a, 0x66, 0x35, 0x33, 0x6b, 0xf0, 0x5b, 0xf0,
	0x1c, 0x48, 0xbc, 0x07, 0x97, 0x15, 0x57, 0x5c, 0xa2, 0xe4, 0x01, 0x10, 0x6f, 0x80, 0xe6, 0xec,
	0xae, 0x77, 0xdb, 0x5a, 0x24, 0xb9, 0x89, 0x66, 0xbe, 0x9d, 0xef, 0x9b, 0xef, 0xfc, 0xcc, 0x89,
	0x61, 0x14, 0x33, 0x96, 0xa6, 0x4a, 0x1a, 0x39, 0xce, 0xff, 0x1a, 0x45, 0x23, 0x96, 0x4a, 0x2e,
	0xcc, 0x78, 0xb1, 0x57, 0xdb, 0x8d, 0xf0, 0x33, 0xb9, 0xbd, 0x3a, 0x9f, 0x03, 0xa3, 0xda, 0x89,
	0xc5, 0xde, 0xce, 0x9d, 0x57, 0xe5, 0x22, 0x39, 0x9f, 0x4b, 0x61, 0xa5, 0xf2, 0x55, 0xce, 0x1a,
	0xfc, 0xeb, 0xc0, 0xf6, 0xf7, 0x96, 0xf9, 0xcc, 0x32, 0x0f, 0xa5, 0x38, 0xe5, 0x53, 0xb2, 0x05,
	0x1b, 0x3c, 0xf6, 0x9d, 0xbe, 0x33, 0xf4, 0x82, 0x0d, 0x1e, 0x13, 0x02, 0xad, 0x94, 0x9a, 0x99,
	0xbf, 0x81, 0x08, 0xae, 0xc9, 0x5b, 0xd0, 0x49, 0xb8, 0x60, 0xa1, 0x90, 0x7e, 0xb3, 0xef, 0x0c,
	0x37, 0x83, 0xb6, 0xdd, 0x1e, 0x4b, 0xf2, 0x2d, 0xb4, 0xa8, 0x9a, 0x6a, 0xbf, 0xd5, 0x6f, 0x0e,
	0xbb, 0xfb, 0x9f, 0x8d, 0xfe, 0xd7, 0xe7, 0xe8, 0xd5, 0xbb, 0x47, 0x07, 0x6a, 0xaa, 0x1f, 0x0b,
	0xa3, 0x96, 0x01, 0xca, 0x10, 0x1f, 0x3a, 0x3f, 0x53, 0x13, 0xcd, 0x98, 0xf6, 0x37, 0xfb, 0xcd,
	0xa1, 0x17, 0x94, 0xdb, 0x9d, 0x4f, 0xc1, 0x5b, 0x1d, 0x26, 0xdb, 0xd0, 0x3c, 0x63, 0xcb, 0xc2,
	0xb3, 0x5d, 0x92, 0x5b, 0xb0, 0xb9, 0xa0, 0x49, 0xc6, 0x0a, 0xd7, 0xf9, 0xe6, 0xf3, 0x8d, 0x07,
	0xce, 0xe0, 0x18, 0xe0, 0x39, 0x55, 0x9c, 0x4e, 0x12, 0xf6, 0x75, 0xbc, 0x2e, 0x58, 0x41, 0xe7,
	0x25, 0x0d, 0xd7, 0xe4, 0x5d, 0xf0, 0xe6, 0x32, 0xe6, 0xa7, 0x9c, 0x29, 0xed, 0x37, 0xd1, 0x46,
	0x05, 0x0c, 0x7e, 0x77, 0xc0, 0x2d, 0x05, 0x2d, 0xdd, 0x2c, 0x53, 0x56, 0x08, 0xe2, 0x7a, 0xbd,
	0x15, 0x7b, 0x72, 0x46, 0xf5, 0x0c, 0xd3, 0xe7, 0x05, 0xb8, 0x26, 0x8f, 0xc1, 0x8d, 0x66, 0x3c,
	0x89, 0x15, 0x13, 0x45, 0x02, 0x3f, 0xb8, 0x24, 0x81, 0x55, 0x24, 0xc1, 0x8a, 0x6a, 0xfd, 0x1a,
	0x95, 0x89, 0x88, 0x1a, 0x16, 0xfb, 0x9b, 0x7d, 0x67, 0xe8, 0x06, 0x15, 0x30, 0xf8, 0xb3, 0x09,
	0x70, 0x62, 0x68, 0x74, 0xf6, 0x44, 0xd9, 0xe0, 0xde, 0x01, 0xef, 0x94, 0x27, 0x2c, 0xc4, 0xa8,
	0x73, 0xdb, 0xae, 0x05, 0x8e, 0xed, 0xc7, 0xf7, 0xa0, 0x3b, 0x67, 0x66, 0x26, 0xe3, 0xb0, 0x96,
	0x14, 0xc8, 0xa1, 0xf2, 0x40, 0xde, 0x07, 0xd9, 0x7c, 0xc2, 0x54, 0xd1, 0x0b, 0x80, 0xbd, 0x80,
	0x08, 0xb9, 0x0d, 0x10, 0x25, 0x54, 0xeb, 0x5c, 0xa0, 0x85, 0x02, 0x1e, 0x22, 0xc8, 0x7f, 0x1b,
	0x5c, 0xae, 0x43, 0xaa, 0x97, 0x22, 0x2a, 0x9c, 0x76, 0xb8, 0x3e, 0xb0, 0x5b, 0xb2, 0x0b, 0x37,
	0x23, 0x99, 0x64, 0x73, 0x51, 0x8a, 0xb7, 0x51, 0xfc, 0x46, 0x0e, 0x16, 0xf2, 0xf7, 0xe1, 0x96,
	0x51, 0x54, 0xe8, 0x94, 0x27, 0x2c, 0x0e, 0xab, 0x40, 0x3a, 0x78, 0x11, 0xa9, 0xbe, 0x3d, 0x29,
	0x43, 0xfa, 0x18, 0xde, 0xac, 0x31, 0xea, 0xe6, 0x5d, 0xd4, 0xaf, 0xe9, 0x1d, 0x55, 0x61, 0x3c,
	0x00, 0xbf, 0xc6, 0x7a, 0xd9, 0x97, 0x87, 0xbc, 0x9a, 0xea, 0x61, 0xdd, 0xe1, 0x57, 0xe0, 0x2d,
	0x8a, 0x22, 0x69, 0x1f, 0xae, 0x5b, 0xd4, 0x8a, 0x6b, 0x0b, 0x45, 0xd3, 0x34, 0x3c, 0xb5, 0x55,
	0xf3, 0xbb, 0x98, 0x2b, 0x97, 0xa6, 0x29, 0x56, 0x71, 0xf0, 0x9b, 0x03, 0xdd, 0x1f, 0xed, 0xcb,
	0x08, 0x98, 0xce, 0x12, 0x43, 0x7a, 0x00, 0xec, 0x97, 0x54, 0x31, 0xad, 0xb9, 0x14, 0x45, 0x59,
	0x6b, 0x08, 0x39, 0x82, 0xee, 0x54, 0xca, 0x38, 0x54, 0x78, 0x1c, 0x0b, 0x7b, 0x1d, 0x5f, 0x4f,
	0x1b, 0x01, 0x58, 0x7e, 0x71, 0xdb, 0x2e, 0xdc, 0x60, 0x4a, 0x49, 0x55, 0xca, 0x61, 0x4f, 0x3f,
	0x6d, 0x04, 0x5d, 0x44, 0xf3, 0x43, 0x0f, 0x5d, 0x68, 0xe7, 0x9f, 0x07, 0xff, 0xb4, 0xc0, 0x3d,
	0x11, 0x34, 0xd5, 0x33, 0x69, 0x5e, 0x7b, 0x80, 0xdf, 0x01, 0x54, 0xb7, 0x16, 0xc6, 0xc6, 0xd7,
	0x1c, 0x23, 0x41, 0x4d, 0x82, 0xfc, 0x00, 0xb0, 0xa0, 0x2a, 0x4c, 0xa4, 0x3c, 0xcb, 0x52, 0x7c,
	0xbe, 0xdd, 0xfd, 0x4f, 0x2e, 0x11, 0x2c, 0xdd, 0xd9, 0x90, 0x8f, 0x90, 0x98, 0x0f, 0x25, 0x5b,
	0x8e, 0x7c, 0x6f, 0x7d, 0x1b, 0x8d, 0x0d, 0xdd, 0x0c, 0x36, 0x8c, 0x26, 0x07, 0xd0, 0xc6, 0xd2,
	0xe4, 0x83, 0xea, 0xf2, 0x64, 0x56, 0x4f, 0x30, 0x28, 0x88, 0xe4, 0x51, 0x35, 0xec, 0xda, 0xa8,
	0xf1, 0xe1, 0x25, 0x1a, 0xb5, 0x8a, 0xaf, 0x06, 0x23, 0x39, 0x04, 0xa0, 0xc6, 0x28, 0x3e, 0xc9,
	0x0c, 0xd3, 0x7e, 0x07, 0x85, 0x76, 0x5f, 0x13, 0x2a, 0xfe, 0x0d, 0x2c, 0xf6, 0x46, 0xdf, 0xb0,
	0xe5, 0x73, 0x3b, 0x91, 0x82, 0x1a, 0x8d, 0xbc, 0x0f, 0x5b, 0x82, 0x0a, 0xa9, 0xc3, 0x38, 0x53,
	0xd4, 0xd8, 0x1e, 0x72, 0x31, 0xd2, 0x9b, 0x88, 0x3e, 0x2a, 0x40, 0xf2, 0x25, 0xb8, 0x8a, 0x69,
	0x99, 0xa9, 0x88, 0xf9, 0xde, 0xd5, 0x6f, 0x5a, 0x91, 0x76, 0x18, 0x6c, 0xbd, 0x9c, 0xe2, 0x35,
	0xa3, 0xfc, 0x8b, 0xfa, 0xfc, 0xec, 0xee, 0xdf, 0xbd, 0x62, 0x97, 0xd6, 0x67, 0x3e, 0x81, 0xed,
	0xb2, 0xa4, 0x01, 0xd3, 0xa9, 0x14, 0x9a, 0xed, 0x67, 0xf0, 0x46, 0x89, 0x9d, 0x30, 0xb5, 0xe0,
	0x11, 0x23, 0x13, 0x68, 0x69, 0x26, 0x62, 0x72, 0xf7, 0x8a, 0xed, 0xb1, 0x33, 0xbe, 0xe2, 0xc1,
	0xf2, 0xd2, 0x41, 0xe3, 0xa1, 0xf9, 0xe3, 0xbc, 0xe7, 0xbc, 0x38, 0xef, 0x39, 0x7f, 0x9f, 0xf7,
	0x9c, 0x5f, 0x2f, 0x7a, 0x8d, 0x17, 0x17, 0xbd, 0xc6, 0x5f, 0x17, 0xbd, 0x06, 0xdc, 0x89, 0xe4,
	0x7c, 0xc4, 0x85, 0x61, 0x6a, 0xaa, 0x68, 0x82, 0xca, 0xeb, 0x44, 0x9f, 0x39, 0x3f, 0xdd, 0x9f,
	0x72, 0x33, 0xcb, 0x26, 0x36, 0xb5, 0xe3, 0x15, 0x61, 0x3c, 0x95, 0xf7, 0x2c, 0xe7, 0xde, 0x9a,
	0x1f, 0x10, 0x93, 0x36, 0x82, 0x1f, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x46, 0x6d, 0x52, 0x74,
	0x68, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SnapshotServiceClient is the client API for SnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnapshotServiceClient interface {
	Send(ctx context.Context, in *Snapshot, opts ...grpc.CallOption) (*SnapshotResponse, error)
}

type snapshotServiceClient struct {
	cc *grpc.ClientConn
}

func NewSnapshotServiceClient(cc *grpc.ClientConn) SnapshotServiceClient {
	return &snapshotServiceClient{cc}
}

func (c *snapshotServiceClient) Send(ctx context.Context, in *Snapshot, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := c.cc.Invoke(ctx, "/deepproto.proto.tracepoint.v1.SnapshotService/send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotServiceServer is the server API for SnapshotService service.
type SnapshotServiceServer interface {
	Send(context.Context, *Snapshot) (*SnapshotResponse, error)
}

// UnimplementedSnapshotServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSnapshotServiceServer struct {
}

func (*UnimplementedSnapshotServiceServer) Send(ctx context.Context, req *Snapshot) (*SnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterSnapshotServiceServer(s *grpc.Server, srv SnapshotServiceServer) {
	s.RegisterService(&_SnapshotService_serviceDesc, srv)
}

func _SnapshotService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Snapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deepproto.proto.tracepoint.v1.SnapshotService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).Send(ctx, req.(*Snapshot))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnapshotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deepproto.proto.tracepoint.v1.SnapshotService",
	HandlerType: (*SnapshotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "send",
			Handler:    _SnapshotService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deepproto/proto/tracepoint/v1/tracepoint.proto",
}

func (m *TracePointConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TracePointConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TracePointConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Watches) > 0 {
		for iNdEx := len(m.Watches) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Watches[iNdEx])
			copy(dAtA[i:], m.Watches[iNdEx])
			i = encodeVarintTracepoint(dAtA, i, uint64(len(m.Watches[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTracepoint(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTracepoint(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTracepoint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LineNo != 0 {
		i = encodeVarintTracepoint(dAtA, i, uint64(m.LineNo))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VariableId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VariableId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VariableId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Modifiers) > 0 {
		for iNdEx := len(m.Modifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Modifiers[iNdEx])
			copy(dAtA[i:], m.Modifiers[iNdEx])
			i = encodeVarintTracepoint(dAtA, i, uint64(len(m.Modifiers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Variable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Variable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Variable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Truncated {
		i--
		if m.Truncated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTracepoint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StackFrame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StackFrame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StackFrame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppFrame {
		i--
		if m.AppFrame {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Variables) > 0 {
		for iNdEx := len(m.Variables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Variables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTracepoint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.TranspiledColumnNumber != 0 {
		i = encodeVarintTracepoint(dAtA, i, uint64(m.TranspiledColumnNumber))
		i--
		dAtA[i] = 0x48
	}
	if m.TranspiledLineNumber != 0 {
		i = encodeVarintTracepoint(dAtA, i, uint64(m.TranspiledLineNumber))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TranspiledFileName) > 0 {
		i -= len(m.TranspiledFileName)
		copy(dAtA[i:], m.TranspiledFileName)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.TranspiledFileName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ColumnNumber != 0 {
		i = encodeVarintTracepoint(dAtA, i, uint64(m.ColumnNumber))
		i--
		dAtA[i] = 0x30
	}
	if m.IsAsync {
		i--
		if m.IsAsync {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x22
	}
	if m.LineNumber != 0 {
		i = encodeVarintTracepoint(dAtA, i, uint64(m.LineNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MethodName) > 0 {
		i -= len(m.MethodName)
		copy(dAtA[i:], m.MethodName)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.MethodName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Expression) > 0 {
		i -= len(m.Expression)
		copy(dAtA[i:], m.Expression)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.Expression)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchResult_GoodResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchResult_GoodResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GoodResult != nil {
		{
			size, err := m.GoodResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTracepoint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WatchResult_ErrorResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchResult_ErrorResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ErrorResult)
	copy(dAtA[i:], m.ErrorResult)
	i = encodeVarintTracepoint(dAtA, i, uint64(len(m.ErrorResult)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resource) > 0 {
		for iNdEx := len(m.Resource) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resource[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTracepoint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.NanosDuration != 0 {
		i = encodeVarintTracepoint(dAtA, i, uint64(m.NanosDuration))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTracepoint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Watches) > 0 {
		for iNdEx := len(m.Watches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Watches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTracepoint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Frames) > 0 {
		for iNdEx := len(m.Frames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Frames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTracepoint(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Ts != 0 {
		i = encodeVarintTracepoint(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x20
	}
	if len(m.VarLookup) > 0 {
		for k := range m.VarLookup {
			v := m.VarLookup[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTracepoint(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTracepoint(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTracepoint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Tracepoint != nil {
		{
			size, err := m.Tracepoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTracepoint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTracepoint(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTracepoint(dAtA []byte, offset int, v uint64) int {
	offset -= sovTracepoint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TracePointConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	if m.LineNo != 0 {
		n += 1 + sovTracepoint(uint64(m.LineNo))
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracepoint(uint64(len(k))) + 1 + len(v) + sovTracepoint(uint64(len(v)))
			n += mapEntrySize + 1 + sovTracepoint(uint64(mapEntrySize))
		}
	}
	if len(m.Watches) > 0 {
		for _, s := range m.Watches {
			l = len(s)
			n += 1 + l + sovTracepoint(uint64(l))
		}
	}
	return n
}

func (m *VariableId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	if len(m.Modifiers) > 0 {
		for _, s := range m.Modifiers {
			l = len(s)
			n += 1 + l + sovTracepoint(uint64(l))
		}
	}
	return n
}

func (m *Variable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovTracepoint(uint64(l))
		}
	}
	if m.Truncated {
		n += 2
	}
	return n
}

func (m *StackFrame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	l = len(m.MethodName)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	if m.LineNumber != 0 {
		n += 1 + sovTracepoint(uint64(m.LineNumber))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	if m.IsAsync {
		n += 2
	}
	if m.ColumnNumber != 0 {
		n += 1 + sovTracepoint(uint64(m.ColumnNumber))
	}
	l = len(m.TranspiledFileName)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	if m.TranspiledLineNumber != 0 {
		n += 1 + sovTracepoint(uint64(m.TranspiledLineNumber))
	}
	if m.TranspiledColumnNumber != 0 {
		n += 1 + sovTracepoint(uint64(m.TranspiledColumnNumber))
	}
	if len(m.Variables) > 0 {
		for _, e := range m.Variables {
			l = e.Size()
			n += 1 + l + sovTracepoint(uint64(l))
		}
	}
	if m.AppFrame {
		n += 2
	}
	return n
}

func (m *WatchResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Expression)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *WatchResult_GoodResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodResult != nil {
		l = m.GoodResult.Size()
		n += 1 + l + sovTracepoint(uint64(l))
	}
	return n
}
func (m *WatchResult_ErrorResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrorResult)
	n += 1 + l + sovTracepoint(uint64(l))
	return n
}
func (m *Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTracepoint(uint64(l))
	}
	if m.Tracepoint != nil {
		l = m.Tracepoint.Size()
		n += 1 + l + sovTracepoint(uint64(l))
	}
	if len(m.VarLookup) > 0 {
		for k, v := range m.VarLookup {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTracepoint(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTracepoint(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTracepoint(uint64(mapEntrySize))
		}
	}
	if m.Ts != 0 {
		n += 1 + sovTracepoint(uint64(m.Ts))
	}
	if len(m.Frames) > 0 {
		for _, e := range m.Frames {
			l = e.Size()
			n += 1 + l + sovTracepoint(uint64(l))
		}
	}
	if len(m.Watches) > 0 {
		for _, e := range m.Watches {
			l = e.Size()
			n += 1 + l + sovTracepoint(uint64(l))
		}
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovTracepoint(uint64(l))
		}
	}
	if m.NanosDuration != 0 {
		n += 1 + sovTracepoint(uint64(m.NanosDuration))
	}
	if len(m.Resource) > 0 {
		for _, e := range m.Resource {
			l = e.Size()
			n += 1 + l + sovTracepoint(uint64(l))
		}
	}
	return n
}

func (m *SnapshotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTracepoint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTracepoint(x uint64) (n int) {
	return sovTracepoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TracePointConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracepoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TracePointConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TracePointConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineNo", wireType)
			}
			m.LineNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineNo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracepoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracepoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracepoint
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTracepoint
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracepoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTracepoint
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTracepoint
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracepoint(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTracepoint
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watches", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Watches = append(m.Watches, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracepoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracepoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VariableId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracepoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VariableId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VariableId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modifiers = append(m.Modifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracepoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracepoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Variable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracepoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Variable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Variable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &VariableId{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Truncated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Truncated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTracepoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracepoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StackFrame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracepoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StackFrame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StackFrame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineNumber", wireType)
			}
			m.LineNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAsync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAsync = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnNumber", wireType)
			}
			m.ColumnNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranspiledFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranspiledFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranspiledLineNumber", wireType)
			}
			m.TranspiledLineNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TranspiledLineNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranspiledColumnNumber", wireType)
			}
			m.TranspiledColumnNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TranspiledColumnNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Variables = append(m.Variables, &VariableId{})
			if err := m.Variables[len(m.Variables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppFrame", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppFrame = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTracepoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracepoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracepoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VariableId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &WatchResult_GoodResult{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = &WatchResult_ErrorResult{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracepoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracepoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracepoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracepoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracepoint == nil {
				m.Tracepoint = &TracePointConfig{}
			}
			if err := m.Tracepoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VarLookup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VarLookup == nil {
				m.VarLookup = make(map[string]*Variable)
			}
			var mapkey string
			var mapvalue *Variable
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracepoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracepoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracepoint
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTracepoint
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracepoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTracepoint
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTracepoint
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Variable{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracepoint(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTracepoint
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VarLookup[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Frames = append(m.Frames, &StackFrame{})
			if err := m.Frames[len(m.Frames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Watches = append(m.Watches, &WatchResult{})
			if err := m.Watches[len(m.Watches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &v1.KeyValue{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NanosDuration", wireType)
			}
			m.NanosDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NanosDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracepoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTracepoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = append(m.Resource, &v1.KeyValue{})
			if err := m.Resource[len(m.Resource)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracepoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracepoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracepoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTracepoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTracepoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTracepoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTracepoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracepoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTracepoint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTracepoint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTracepoint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTracepoint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTracepoint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTracepoint = fmt.Errorf("proto: unexpected end of group")
)
