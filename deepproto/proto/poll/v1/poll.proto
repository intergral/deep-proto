// Copyright 2019, Intergral GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package deepproto.proto.poll.v1;

import "deepproto/proto/resource/v1/resource.proto";
import "deepproto/proto/tracepoint/v1/tracepoint.proto";

option java_multiple_files = true;
option java_package = "com.intergral.deep.proto.poll.v1";
option go_package = "github.com/intergral/go-deep-proto/poll/v1";

message PollRequest {
  fixed64 ts_nanos = 1; //time message was sent, acts as message id (useful for tracing)
  string current_hash = 2; //some id that represents the clients current config, or null if no current config
  deepproto.proto.resource.v1.Resource resource = 3; //this is the attributes that describe the resource requesting a config (e.g. service.name: shop-service)
}

enum ResponseType {
  NO_CHANGE = 0; // This is sent when the 'currentHash' from the request is the same as the response. So the client should do nothing.
  UPDATE = 1; // This is sent when the client should process the response to update the config.
}

message PollResponse {
  fixed64 ts_nanos = 1; //time message was sent, acts as message id (useful for tracing)
  string current_hash = 2; //some id that represents the clients current config, or null if no current config
  repeated deepproto.proto.tracepoint.v1.TracePointConfig response = 3; // this would be the list of dynamic configs that are to be installed. This should be the full set, not a partial or delta. Can be null if the response type is 'no-change'
  ResponseType response_type = 4; // This indicates if the config has changed or not. if 'no-change' then 'response' will be null/empty
}

// This is how the application agent should request the config of the tracepoints.
service PollConfig {
  //Call this function as often as is required to ensure config is up to date.
  rpc poll (PollRequest) returns (PollResponse) {}
}
